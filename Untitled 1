import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;
 
public class A {
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int lines = s.nextInt();
 
        s.nextLine();
 
        for (int i = 0; i < lines; i += 1) {
            solve(s.nextInt(), s.nextInt(), s);
        }
    }
 
 
    public static void solve(int n, int k, Scanner s) {
        int[][] rams = new int[n][2];
        for (int i = 0; i < n; i++) {
            rams[i][0] = s.nextInt();
        }
        for (int i = 0; i < n; i++) {
            rams[i][1] = s.nextInt();
        }
 
        Arrays.sort(rams, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[0] - o2[0];
            }
        });
 
        for (int[] e: rams) {
            if (e[0] <= k) k += e[1];
        }
 
        System.out.println(k);
    }
}

package problems_800;

import java.util.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Watermelon {
	
	
	public static void main(String[] args) throws IOException{
		BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
		int testCases = Integer.parseInt(read.readLine());
		
		while(testCases-- > 0) {
			// input for arrays with size n
			int n = Integer.parseInt(read.readLine());
			int[] arr = new int[n];
			
			for(int i = 0; i < n; i++) {
				arr[i] = Integer.parseInt(read.readLine());
			}

			// call function below
			
			
			// Output final answer
			System.out.println();
		}
	}

}
